#!/usr/bin/env node

"use strict"

const Tilda = require("tilda")
    , Bloggify = require("..")
    , Logger = require("cute-logger")
    , abs = require("abs")

process.stdin.isTTY = true
let parser = new Tilda(`${__dirname}/../package.json`, {
    examples: [
        "bloggify start"
      , "bloggify start -c path/to/config/file.json"
    ]
  , desc: "Starts the Bloggify process."
  , options: [
        {
            name: "path"
          , opts: ["config", "c"]
          , desc: "The path to the config file or site directory."
          , type: String
          , default: ".bloggify/config.json"
        }
      , {
            name: "script"
          , opts: ["s", "script"]
          , desc: "Execute a specific script in the context of your Bloggify app."
          , type: String
          , default: ""
        }
      , {
            name: "repl"
          , opts: ["r", "repl"]
          , desc: "Enable the interactive REPL."
          , type: Boolean
          , default: false
        }
      , {
            opts: ["daemon", "d"]
          , desc: "Start the process as daemon."
          , type: Boolean
        }
      , {
            name: "cert"
          , opts: ["cert"]
          , desc: "The path to the certificate file."
          , type: String
        }
      , {
            name: "key"
          , opts: ["key"]
          , desc: "The path to the key file."
          , type: String
        }
      , {
            name: "port"
          , opts: ["port", "p"]
          , desc: "The server port."
          , type: Number
        }
    ]
}).main(action => {
    console.log(`
     ------------------------------
         ___
     ,,,(o,o),,,  Starting Bloggify
      ';:\`-':;'   - - - - - - - - -
        -"-"-     Version: ${parser.version}

     ------------------------------
`)

    let opts = {}

    if (action.options.cert.value && action.options.key.value) {
        opts.server = {
            ssl: {
                cert: action.options.cert.value
              , key: action.options.key.value
            }
          , port: action.options.port.value
        }
    }

    let app = new Bloggify(opts)
    app.onLoad(err => {
        Logger.log(`Bloggify server running on port ${app._serverPort}`)
        if (!err) {
            app.ready(() => {
                setTimeout(() => {
                    if (action.options.script.value) {
                        // Build the module path
                        const scriptPath = abs(action.options.script.value)
                        Logger.log(`Running ${scriptPath}...`)

                        // Load the module
                        const scr = require(scriptPath)

                        // Detect the init script
                        const init = typeof scr.init === "function" ? scr.init :
                            typeof scr === "function" ? scr :
                            (() => {})

                        // Run the init function
                        Promise.resolve().then(() => {
                            return init()
                        }).catch(err => {
                            Bloggify.log(err, "error")
                        })
                        app.exit()
                    }
                    if (action.options.repl.value) {
                        const repl = require("repl");
                        const replServer = repl.start({
                            prompt: "Bloggify > ",
                            useGlobal: true
                        });
                        replServer.displayPrompt
                    }
                }, 0)
            })
        }
    })
})
